<?php
namespace marsapp\helper\test\mapping;

use marsapp\dev\tools\DevTools;
use marsapp\helper\mapping\MapHelper;

/**
 * Test for MapHelper
 * 
 * @author Mars Hung <tfaredxj@gmail.com>
 *
 */
class Test
{

    /**
     * Construct
     */
    public function __construct()
    {}

    /**
     * *********************************************
     * ************** Public Function **************
     * *********************************************
     */
    
    /**
     * Test Cut
     *
     * @param string $detail
     */
    public static function testCut($detail = false)
    {
        $templetes = self::testCutData();
        $expecteds = self::testCutExpected();
        
        $theSame = true;
        $theSame1 = true;
        
        // The same
        foreach ($templetes as $k => $templete) {
            // The same
            $result = call_user_func_array(['\marsapp\helper\timeperiod\TimePeriodHelper','cut'], $templete);
            $compare = DevTools::theSame($result, $expecteds[$k], $detail);
            
            $theSame1 = $theSame1 && $compare;
        }
        
        $theSame = $theSame1 ;
        
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    /**
     * ****************************************************
     * ************** Data Templete Function **************
     * ****************************************************
     */
    
    /**
     * Test Data - Cut
     * @return array
     */
    public static function testCutData()
    {
        return [
            [[['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']], '30', false, 'second'],
            [[['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']], '30', false, 'minute'],
            [[['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']], '30', false, 'hour'],
            [[['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']], '30', true, 'hour'],
            
            [[['2019-01-04 08:00','2019-01-04 12:00'], ['2019-01-04 13:00','2019-01-04 16:00']], '30', false, 'second'],
            [[['2019-01-04 08:00','2019-01-04 12:00'], ['2019-01-04 13:00','2019-01-04 16:00']], '30', false, 'minute'],
            [[['2019-01-04 08:00','2019-01-04 12:00'], ['2019-01-04 13:00','2019-01-04 16:00']], '30', false, 'hour'],
            [[['2019-01-04 08:00','2019-01-04 12:00'], ['2019-01-04 13:00','2019-01-04 16:00']], '30', true, 'hour'],
            // Test auto sort out by  union()
            [[['2019-01-04 09:00:00','2019-01-04 10:00:00'], ['2019-01-04 08:00:00','2019-01-04 09:00:00'], ['2019-01-04 09:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']], '30', false, 'hour'],
        ];
    }
    
    /**
     * Expected Data - Cut
     * @return array
     */
    public static function testCutExpected()
    {
        return [
            [['2019-01-04 08:00:00','2019-01-04 08:00:30']],
            [['2019-01-04 08:00:00','2019-01-04 08:30:00']],
            [['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']],
            [['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-05 15:00:00']],
            
            [],
            [['2019-01-04 08:00','2019-01-04 08:30']],
            [['2019-01-04 08:00','2019-01-04 12:00'], ['2019-01-04 13:00','2019-01-04 16:00']],
            [['2019-01-04 08:00','2019-01-04 12:00'], ['2019-01-04 13:00','2019-01-05 15:00']],
            // Test auto sort out by  union()
            [['2019-01-04 08:00:00','2019-01-04 12:00:00'], ['2019-01-04 13:00:00','2019-01-04 16:00:00']],
        ];
    }
    
}